// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.17.3
// source: tag.proto

package discoursepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users     []*Tag_Users   `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	TopicList *Tag_TopicList `protobuf:"bytes,2,opt,name=topic_list,json=topicList,proto3" json:"topic_list,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_tag_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_tag_proto_rawDescGZIP(), []int{0}
}

func (x *Tag) GetUsers() []*Tag_Users {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *Tag) GetTopicList() *Tag_TopicList {
	if x != nil {
		return x.TopicList
	}
	return nil
}

type Tag_Users struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AvatarTemplate string `protobuf:"bytes,3,opt,name=avatar_template,json=avatarTemplate,proto3" json:"avatar_template,omitempty"`
}

func (x *Tag_Users) Reset() {
	*x = Tag_Users{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag_Users) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag_Users) ProtoMessage() {}

func (x *Tag_Users) ProtoReflect() protoreflect.Message {
	mi := &file_tag_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag_Users.ProtoReflect.Descriptor instead.
func (*Tag_Users) Descriptor() ([]byte, []int) {
	return file_tag_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Tag_Users) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tag_Users) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag_Users) GetAvatarTemplate() string {
	if x != nil {
		return x.AvatarTemplate
	}
	return ""
}

type Tag_TopicList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanCreateTopic bool                    `protobuf:"varint,1,opt,name=can_create_topic,json=canCreateTopic,proto3" json:"can_create_topic,omitempty"`
	DraftKey       string                  `protobuf:"bytes,2,opt,name=draft_key,json=draftKey,proto3" json:"draft_key,omitempty"`
	DraftSequance  int32                   `protobuf:"varint,3,opt,name=draft_sequance,json=draftSequance,proto3" json:"draft_sequance,omitempty"`
	PerPage        int32                   `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	TopTags        []string                `protobuf:"bytes,5,rep,name=top_tags,json=topTags,proto3" json:"top_tags,omitempty"`
	Tags           []*Tag_TopicList_Tags   `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	Topics         []*Tag_TopicList_Topics `protobuf:"bytes,7,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *Tag_TopicList) Reset() {
	*x = Tag_TopicList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag_TopicList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag_TopicList) ProtoMessage() {}

func (x *Tag_TopicList) ProtoReflect() protoreflect.Message {
	mi := &file_tag_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag_TopicList.ProtoReflect.Descriptor instead.
func (*Tag_TopicList) Descriptor() ([]byte, []int) {
	return file_tag_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Tag_TopicList) GetCanCreateTopic() bool {
	if x != nil {
		return x.CanCreateTopic
	}
	return false
}

func (x *Tag_TopicList) GetDraftKey() string {
	if x != nil {
		return x.DraftKey
	}
	return ""
}

func (x *Tag_TopicList) GetDraftSequance() int32 {
	if x != nil {
		return x.DraftSequance
	}
	return 0
}

func (x *Tag_TopicList) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *Tag_TopicList) GetTopTags() []string {
	if x != nil {
		return x.TopTags
	}
	return nil
}

func (x *Tag_TopicList) GetTags() []*Tag_TopicList_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Tag_TopicList) GetTopics() []*Tag_TopicList_Topics {
	if x != nil {
		return x.Topics
	}
	return nil
}

type Tag_TopicList_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TopicCount int32  `protobuf:"varint,3,opt,name=topic_count,json=topicCount,proto3" json:"topic_count,omitempty"`
	Staff      bool   `protobuf:"varint,4,opt,name=staff,proto3" json:"staff,omitempty"`
}

func (x *Tag_TopicList_Tags) Reset() {
	*x = Tag_TopicList_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag_TopicList_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag_TopicList_Tags) ProtoMessage() {}

func (x *Tag_TopicList_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_tag_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag_TopicList_Tags.ProtoReflect.Descriptor instead.
func (*Tag_TopicList_Tags) Descriptor() ([]byte, []int) {
	return file_tag_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Tag_TopicList_Tags) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tag_TopicList_Tags) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag_TopicList_Tags) GetTopicCount() int32 {
	if x != nil {
		return x.TopicCount
	}
	return 0
}

func (x *Tag_TopicList_Tags) GetStaff() bool {
	if x != nil {
		return x.Staff
	}
	return false
}

type Tag_TopicList_Topics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int32                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title              string                          `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	FancyTitle         string                          `protobuf:"bytes,3,opt,name=fancy_title,json=fancyTitle,proto3" json:"fancy_title,omitempty"`
	Slug               string                          `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	PostsCount         int32                           `protobuf:"varint,5,opt,name=posts_count,json=postsCount,proto3" json:"posts_count,omitempty"`
	ReplyCount         int32                           `protobuf:"varint,6,opt,name=reply_count,json=replyCount,proto3" json:"reply_count,omitempty"`
	HighestPostNumber  int32                           `protobuf:"varint,7,opt,name=highest_post_number,json=highestPostNumber,proto3" json:"highest_post_number,omitempty"`
	ImageUrl           string                          `protobuf:"bytes,8,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	CreatedAt          *timestamppb.Timestamp          `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastPostedAt       *timestamppb.Timestamp          `protobuf:"bytes,10,opt,name=last_posted_at,json=lastPostedAt,proto3" json:"last_posted_at,omitempty"`
	Bumped             bool                            `protobuf:"varint,11,opt,name=bumped,proto3" json:"bumped,omitempty"`
	BumpedAt           *timestamppb.Timestamp          `protobuf:"bytes,12,opt,name=bumped_at,json=bumpedAt,proto3" json:"bumped_at,omitempty"`
	Archetype          string                          `protobuf:"bytes,13,opt,name=archetype,proto3" json:"archetype,omitempty"`
	Unseen             bool                            `protobuf:"varint,14,opt,name=unseen,proto3" json:"unseen,omitempty"`
	LastReadPostNumber int32                           `protobuf:"varint,15,opt,name=last_read_post_number,json=lastReadPostNumber,proto3" json:"last_read_post_number,omitempty"`
	Unread             int32                           `protobuf:"varint,16,opt,name=unread,proto3" json:"unread,omitempty"`
	NewPosts           int32                           `protobuf:"varint,17,opt,name=new_posts,json=newPosts,proto3" json:"new_posts,omitempty"`
	Pinned             bool                            `protobuf:"varint,18,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Visible            bool                            `protobuf:"varint,19,opt,name=visible,proto3" json:"visible,omitempty"`
	Closed             bool                            `protobuf:"varint,20,opt,name=closed,proto3" json:"closed,omitempty"`
	Archived           bool                            `protobuf:"varint,21,opt,name=archived,proto3" json:"archived,omitempty"`
	NotificationLevel  int32                           `protobuf:"varint,22,opt,name=notification_level,json=notificationLevel,proto3" json:"notification_level,omitempty"`
	Bookmarked         bool                            `protobuf:"varint,23,opt,name=bookmarked,proto3" json:"bookmarked,omitempty"`
	Liked              bool                            `protobuf:"varint,24,opt,name=liked,proto3" json:"liked,omitempty"`
	Tags               []string                        `protobuf:"bytes,25,rep,name=tags,proto3" json:"tags,omitempty"`
	Views              int32                           `protobuf:"varint,26,opt,name=views,proto3" json:"views,omitempty"`
	LikeCount          int32                           `protobuf:"varint,27,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	HasSummary         bool                            `protobuf:"varint,28,opt,name=has_summary,json=hasSummary,proto3" json:"has_summary,omitempty"`
	LastPosterUsername string                          `protobuf:"bytes,29,opt,name=last_poster_username,json=lastPosterUsername,proto3" json:"last_poster_username,omitempty"`
	CategoryId         int32                           `protobuf:"varint,30,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	PinnedGlobally     bool                            `protobuf:"varint,31,opt,name=pinned_globally,json=pinnedGlobally,proto3" json:"pinned_globally,omitempty"`
	HasAcceptedAnswer  bool                            `protobuf:"varint,32,opt,name=has_accepted_answer,json=hasAcceptedAnswer,proto3" json:"has_accepted_answer,omitempty"`
	Posters            []*Tag_TopicList_Topics_Posters `protobuf:"bytes,33,rep,name=posters,proto3" json:"posters,omitempty"`
}

func (x *Tag_TopicList_Topics) Reset() {
	*x = Tag_TopicList_Topics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag_TopicList_Topics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag_TopicList_Topics) ProtoMessage() {}

func (x *Tag_TopicList_Topics) ProtoReflect() protoreflect.Message {
	mi := &file_tag_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag_TopicList_Topics.ProtoReflect.Descriptor instead.
func (*Tag_TopicList_Topics) Descriptor() ([]byte, []int) {
	return file_tag_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *Tag_TopicList_Topics) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tag_TopicList_Topics) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tag_TopicList_Topics) GetFancyTitle() string {
	if x != nil {
		return x.FancyTitle
	}
	return ""
}

func (x *Tag_TopicList_Topics) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Tag_TopicList_Topics) GetPostsCount() int32 {
	if x != nil {
		return x.PostsCount
	}
	return 0
}

func (x *Tag_TopicList_Topics) GetReplyCount() int32 {
	if x != nil {
		return x.ReplyCount
	}
	return 0
}

func (x *Tag_TopicList_Topics) GetHighestPostNumber() int32 {
	if x != nil {
		return x.HighestPostNumber
	}
	return 0
}

func (x *Tag_TopicList_Topics) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Tag_TopicList_Topics) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Tag_TopicList_Topics) GetLastPostedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPostedAt
	}
	return nil
}

func (x *Tag_TopicList_Topics) GetBumped() bool {
	if x != nil {
		return x.Bumped
	}
	return false
}

func (x *Tag_TopicList_Topics) GetBumpedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.BumpedAt
	}
	return nil
}

func (x *Tag_TopicList_Topics) GetArchetype() string {
	if x != nil {
		return x.Archetype
	}
	return ""
}

func (x *Tag_TopicList_Topics) GetUnseen() bool {
	if x != nil {
		return x.Unseen
	}
	return false
}

func (x *Tag_TopicList_Topics) GetLastReadPostNumber() int32 {
	if x != nil {
		return x.LastReadPostNumber
	}
	return 0
}

func (x *Tag_TopicList_Topics) GetUnread() int32 {
	if x != nil {
		return x.Unread
	}
	return 0
}

func (x *Tag_TopicList_Topics) GetNewPosts() int32 {
	if x != nil {
		return x.NewPosts
	}
	return 0
}

func (x *Tag_TopicList_Topics) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

func (x *Tag_TopicList_Topics) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *Tag_TopicList_Topics) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *Tag_TopicList_Topics) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *Tag_TopicList_Topics) GetNotificationLevel() int32 {
	if x != nil {
		return x.NotificationLevel
	}
	return 0
}

func (x *Tag_TopicList_Topics) GetBookmarked() bool {
	if x != nil {
		return x.Bookmarked
	}
	return false
}

func (x *Tag_TopicList_Topics) GetLiked() bool {
	if x != nil {
		return x.Liked
	}
	return false
}

func (x *Tag_TopicList_Topics) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Tag_TopicList_Topics) GetViews() int32 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *Tag_TopicList_Topics) GetLikeCount() int32 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *Tag_TopicList_Topics) GetHasSummary() bool {
	if x != nil {
		return x.HasSummary
	}
	return false
}

func (x *Tag_TopicList_Topics) GetLastPosterUsername() string {
	if x != nil {
		return x.LastPosterUsername
	}
	return ""
}

func (x *Tag_TopicList_Topics) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *Tag_TopicList_Topics) GetPinnedGlobally() bool {
	if x != nil {
		return x.PinnedGlobally
	}
	return false
}

func (x *Tag_TopicList_Topics) GetHasAcceptedAnswer() bool {
	if x != nil {
		return x.HasAcceptedAnswer
	}
	return false
}

func (x *Tag_TopicList_Topics) GetPosters() []*Tag_TopicList_Topics_Posters {
	if x != nil {
		return x.Posters
	}
	return nil
}

type Tag_TopicList_Topics_Posters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extras      string `protobuf:"bytes,1,opt,name=extras,proto3" json:"extras,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	UserId      int32  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *Tag_TopicList_Topics_Posters) Reset() {
	*x = Tag_TopicList_Topics_Posters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag_TopicList_Topics_Posters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag_TopicList_Topics_Posters) ProtoMessage() {}

func (x *Tag_TopicList_Topics_Posters) ProtoReflect() protoreflect.Message {
	mi := &file_tag_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag_TopicList_Topics_Posters.ProtoReflect.Descriptor instead.
func (*Tag_TopicList_Topics_Posters) Descriptor() ([]byte, []int) {
	return file_tag_proto_rawDescGZIP(), []int{0, 1, 1, 0}
}

func (x *Tag_TopicList_Topics_Posters) GetExtras() string {
	if x != nil {
		return x.Extras
	}
	return ""
}

func (x *Tag_TopicList_Topics_Posters) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Tag_TopicList_Topics_Posters) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

var File_tag_proto protoreflect.FileDescriptor

var file_tag_proto_rawDesc = []byte{
	0x0a, 0x09, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd1, 0x0e, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x61, 0x67,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a,
	0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x61, 0x67, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0x54, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0xfc, 0x0c, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63,
	0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x72, 0x61, 0x66, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x65, 0x71, 0x75, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x6f, 0x70, 0x54, 0x61, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x61, 0x67, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x61, 0x67, 0x2e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x06, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x1a, 0x61, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x1a, 0xe9, 0x09, 0x0a, 0x06, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x6e,
	0x63, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x61, 0x6e, 0x63, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x68,
	0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75,
	0x6d, 0x70, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x75, 0x6d, 0x70,
	0x65, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x62, 0x75, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x62, 0x75, 0x6d, 0x70, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x73,
	0x65, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x73, 0x65, 0x65,
	0x6e, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x65, 0x77, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x2d, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c,
	0x69, 0x6b, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x30,
	0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61,
	0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x6c, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61,
	0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x07, 0x70, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x61, 0x67, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x70,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x5c, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x63, 0x68, 0x61, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x64, 0x6d, 0x61,
	0x6e, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tag_proto_rawDescOnce sync.Once
	file_tag_proto_rawDescData = file_tag_proto_rawDesc
)

func file_tag_proto_rawDescGZIP() []byte {
	file_tag_proto_rawDescOnce.Do(func() {
		file_tag_proto_rawDescData = protoimpl.X.CompressGZIP(file_tag_proto_rawDescData)
	})
	return file_tag_proto_rawDescData
}

var file_tag_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_tag_proto_goTypes = []interface{}{
	(*Tag)(nil),                          // 0: discourse.protobuf.Tag
	(*Tag_Users)(nil),                    // 1: discourse.protobuf.Tag.Users
	(*Tag_TopicList)(nil),                // 2: discourse.protobuf.Tag.TopicList
	(*Tag_TopicList_Tags)(nil),           // 3: discourse.protobuf.Tag.TopicList.Tags
	(*Tag_TopicList_Topics)(nil),         // 4: discourse.protobuf.Tag.TopicList.Topics
	(*Tag_TopicList_Topics_Posters)(nil), // 5: discourse.protobuf.Tag.TopicList.Topics.Posters
	(*timestamppb.Timestamp)(nil),        // 6: google.protobuf.Timestamp
}
var file_tag_proto_depIdxs = []int32{
	1, // 0: discourse.protobuf.Tag.users:type_name -> discourse.protobuf.Tag.Users
	2, // 1: discourse.protobuf.Tag.topic_list:type_name -> discourse.protobuf.Tag.TopicList
	3, // 2: discourse.protobuf.Tag.TopicList.tags:type_name -> discourse.protobuf.Tag.TopicList.Tags
	4, // 3: discourse.protobuf.Tag.TopicList.topics:type_name -> discourse.protobuf.Tag.TopicList.Topics
	6, // 4: discourse.protobuf.Tag.TopicList.Topics.created_at:type_name -> google.protobuf.Timestamp
	6, // 5: discourse.protobuf.Tag.TopicList.Topics.last_posted_at:type_name -> google.protobuf.Timestamp
	6, // 6: discourse.protobuf.Tag.TopicList.Topics.bumped_at:type_name -> google.protobuf.Timestamp
	5, // 7: discourse.protobuf.Tag.TopicList.Topics.posters:type_name -> discourse.protobuf.Tag.TopicList.Topics.Posters
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_tag_proto_init() }
func file_tag_proto_init() {
	if File_tag_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tag_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag_Users); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag_TopicList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag_TopicList_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag_TopicList_Topics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag_TopicList_Topics_Posters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tag_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tag_proto_goTypes,
		DependencyIndexes: file_tag_proto_depIdxs,
		MessageInfos:      file_tag_proto_msgTypes,
	}.Build()
	File_tag_proto = out.File
	file_tag_proto_rawDesc = nil
	file_tag_proto_goTypes = nil
	file_tag_proto_depIdxs = nil
}
