// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.17.3
// source: categories.proto

package discoursepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Categories struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryList *Categories_CategoryList `protobuf:"bytes,1,opt,name=category_list,json=categoryList,proto3" json:"category_list,omitempty"`
}

func (x *Categories) Reset() {
	*x = Categories{}
	if protoimpl.UnsafeEnabled {
		mi := &file_categories_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Categories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Categories) ProtoMessage() {}

func (x *Categories) ProtoReflect() protoreflect.Message {
	mi := &file_categories_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Categories.ProtoReflect.Descriptor instead.
func (*Categories) Descriptor() ([]byte, []int) {
	return file_categories_proto_rawDescGZIP(), []int{0}
}

func (x *Categories) GetCategoryList() *Categories_CategoryList {
	if x != nil {
		return x.CategoryList
	}
	return nil
}

type Categories_CategoryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanCreateCategory bool                                  `protobuf:"varint,1,opt,name=can_create_category,json=canCreateCategory,proto3" json:"can_create_category,omitempty"`
	CanCreateTopic    bool                                  `protobuf:"varint,2,opt,name=can_create_topic,json=canCreateTopic,proto3" json:"can_create_topic,omitempty"`
	Categories        []*Categories_CategoryList_Categories `protobuf:"bytes,3,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *Categories_CategoryList) Reset() {
	*x = Categories_CategoryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_categories_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Categories_CategoryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Categories_CategoryList) ProtoMessage() {}

func (x *Categories_CategoryList) ProtoReflect() protoreflect.Message {
	mi := &file_categories_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Categories_CategoryList.ProtoReflect.Descriptor instead.
func (*Categories_CategoryList) Descriptor() ([]byte, []int) {
	return file_categories_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Categories_CategoryList) GetCanCreateCategory() bool {
	if x != nil {
		return x.CanCreateCategory
	}
	return false
}

func (x *Categories_CategoryList) GetCanCreateTopic() bool {
	if x != nil {
		return x.CanCreateTopic
	}
	return false
}

func (x *Categories_CategoryList) GetCategories() []*Categories_CategoryList_Categories {
	if x != nil {
		return x.Categories
	}
	return nil
}

type Categories_CategoryList_Categories struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                         string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Color                        string  `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	TextColor                    string  `protobuf:"bytes,4,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	Slug                         string  `protobuf:"bytes,5,opt,name=slug,proto3" json:"slug,omitempty"`
	TopicCount                   int32   `protobuf:"varint,6,opt,name=topic_count,json=topicCount,proto3" json:"topic_count,omitempty"`
	PostCount                    int32   `protobuf:"varint,7,opt,name=post_count,json=postCount,proto3" json:"post_count,omitempty"`
	Position                     int32   `protobuf:"varint,8,opt,name=position,proto3" json:"position,omitempty"`
	Description                  string  `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	DescriptionText              string  `protobuf:"bytes,10,opt,name=description_text,json=descriptionText,proto3" json:"description_text,omitempty"`
	DescriptionExcerpt           string  `protobuf:"bytes,11,opt,name=description_excerpt,json=descriptionExcerpt,proto3" json:"description_excerpt,omitempty"`
	TopicUrl                     string  `protobuf:"bytes,12,opt,name=topic_url,json=topicUrl,proto3" json:"topic_url,omitempty"`
	ReadRestricted               bool    `protobuf:"varint,13,opt,name=read_restricted,json=readRestricted,proto3" json:"read_restricted,omitempty"`
	Permission                   int32   `protobuf:"varint,14,opt,name=permission,proto3" json:"permission,omitempty"`
	NotificationLevel            int32   `protobuf:"varint,15,opt,name=notification_level,json=notificationLevel,proto3" json:"notification_level,omitempty"`
	CanEdit                      bool    `protobuf:"varint,16,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`
	TopicTemplate                string  `protobuf:"bytes,17,opt,name=topic_template,json=topicTemplate,proto3" json:"topic_template,omitempty"`
	HasChildren                  bool    `protobuf:"varint,18,opt,name=has_children,json=hasChildren,proto3" json:"has_children,omitempty"`
	SortOrder                    string  `protobuf:"bytes,19,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	ShowSubcategoryList          bool    `protobuf:"varint,20,opt,name=show_subcategory_list,json=showSubcategoryList,proto3" json:"show_subcategory_list,omitempty"`
	NumFeaturedTopics            int32   `protobuf:"varint,21,opt,name=num_featured_topics,json=numFeaturedTopics,proto3" json:"num_featured_topics,omitempty"`
	DefaultView                  string  `protobuf:"bytes,22,opt,name=default_view,json=defaultView,proto3" json:"default_view,omitempty"`
	SubcategoryListStyle         string  `protobuf:"bytes,23,opt,name=subcategory_list_style,json=subcategoryListStyle,proto3" json:"subcategory_list_style,omitempty"`
	DefaultTopPeriod             string  `protobuf:"bytes,24,opt,name=default_top_period,json=defaultTopPeriod,proto3" json:"default_top_period,omitempty"`
	DefaultListFilter            string  `protobuf:"bytes,25,opt,name=default_list_filter,json=defaultListFilter,proto3" json:"default_list_filter,omitempty"`
	MinimumRequiredTags          int32   `protobuf:"varint,26,opt,name=minimum_required_tags,json=minimumRequiredTags,proto3" json:"minimum_required_tags,omitempty"`
	NavigateToFirstPostAfterRead bool    `protobuf:"varint,27,opt,name=navigate_to_first_post_after_read,json=navigateToFirstPostAfterRead,proto3" json:"navigate_to_first_post_after_read,omitempty"`
	TopicsDay                    int32   `protobuf:"varint,28,opt,name=topics_day,json=topicsDay,proto3" json:"topics_day,omitempty"`
	TopicsWeek                   int32   `protobuf:"varint,29,opt,name=topics_week,json=topicsWeek,proto3" json:"topics_week,omitempty"`
	TopicsMonth                  int32   `protobuf:"varint,30,opt,name=topics_month,json=topicsMonth,proto3" json:"topics_month,omitempty"`
	TopicsYear                   int32   `protobuf:"varint,31,opt,name=topics_year,json=topicsYear,proto3" json:"topics_year,omitempty"`
	TopicsAllTime                int32   `protobuf:"varint,32,opt,name=topics_all_time,json=topicsAllTime,proto3" json:"topics_all_time,omitempty"`
	SubcategoryIds               []int32 `protobuf:"varint,33,rep,packed,name=subcategory_ids,json=subcategoryIds,proto3" json:"subcategory_ids,omitempty"`
}

func (x *Categories_CategoryList_Categories) Reset() {
	*x = Categories_CategoryList_Categories{}
	if protoimpl.UnsafeEnabled {
		mi := &file_categories_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Categories_CategoryList_Categories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Categories_CategoryList_Categories) ProtoMessage() {}

func (x *Categories_CategoryList_Categories) ProtoReflect() protoreflect.Message {
	mi := &file_categories_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Categories_CategoryList_Categories.ProtoReflect.Descriptor instead.
func (*Categories_CategoryList_Categories) Descriptor() ([]byte, []int) {
	return file_categories_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Categories_CategoryList_Categories) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Categories_CategoryList_Categories) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Categories_CategoryList_Categories) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Categories_CategoryList_Categories) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *Categories_CategoryList_Categories) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Categories_CategoryList_Categories) GetTopicCount() int32 {
	if x != nil {
		return x.TopicCount
	}
	return 0
}

func (x *Categories_CategoryList_Categories) GetPostCount() int32 {
	if x != nil {
		return x.PostCount
	}
	return 0
}

func (x *Categories_CategoryList_Categories) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Categories_CategoryList_Categories) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Categories_CategoryList_Categories) GetDescriptionText() string {
	if x != nil {
		return x.DescriptionText
	}
	return ""
}

func (x *Categories_CategoryList_Categories) GetDescriptionExcerpt() string {
	if x != nil {
		return x.DescriptionExcerpt
	}
	return ""
}

func (x *Categories_CategoryList_Categories) GetTopicUrl() string {
	if x != nil {
		return x.TopicUrl
	}
	return ""
}

func (x *Categories_CategoryList_Categories) GetReadRestricted() bool {
	if x != nil {
		return x.ReadRestricted
	}
	return false
}

func (x *Categories_CategoryList_Categories) GetPermission() int32 {
	if x != nil {
		return x.Permission
	}
	return 0
}

func (x *Categories_CategoryList_Categories) GetNotificationLevel() int32 {
	if x != nil {
		return x.NotificationLevel
	}
	return 0
}

func (x *Categories_CategoryList_Categories) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *Categories_CategoryList_Categories) GetTopicTemplate() string {
	if x != nil {
		return x.TopicTemplate
	}
	return ""
}

func (x *Categories_CategoryList_Categories) GetHasChildren() bool {
	if x != nil {
		return x.HasChildren
	}
	return false
}

func (x *Categories_CategoryList_Categories) GetSortOrder() string {
	if x != nil {
		return x.SortOrder
	}
	return ""
}

func (x *Categories_CategoryList_Categories) GetShowSubcategoryList() bool {
	if x != nil {
		return x.ShowSubcategoryList
	}
	return false
}

func (x *Categories_CategoryList_Categories) GetNumFeaturedTopics() int32 {
	if x != nil {
		return x.NumFeaturedTopics
	}
	return 0
}

func (x *Categories_CategoryList_Categories) GetDefaultView() string {
	if x != nil {
		return x.DefaultView
	}
	return ""
}

func (x *Categories_CategoryList_Categories) GetSubcategoryListStyle() string {
	if x != nil {
		return x.SubcategoryListStyle
	}
	return ""
}

func (x *Categories_CategoryList_Categories) GetDefaultTopPeriod() string {
	if x != nil {
		return x.DefaultTopPeriod
	}
	return ""
}

func (x *Categories_CategoryList_Categories) GetDefaultListFilter() string {
	if x != nil {
		return x.DefaultListFilter
	}
	return ""
}

func (x *Categories_CategoryList_Categories) GetMinimumRequiredTags() int32 {
	if x != nil {
		return x.MinimumRequiredTags
	}
	return 0
}

func (x *Categories_CategoryList_Categories) GetNavigateToFirstPostAfterRead() bool {
	if x != nil {
		return x.NavigateToFirstPostAfterRead
	}
	return false
}

func (x *Categories_CategoryList_Categories) GetTopicsDay() int32 {
	if x != nil {
		return x.TopicsDay
	}
	return 0
}

func (x *Categories_CategoryList_Categories) GetTopicsWeek() int32 {
	if x != nil {
		return x.TopicsWeek
	}
	return 0
}

func (x *Categories_CategoryList_Categories) GetTopicsMonth() int32 {
	if x != nil {
		return x.TopicsMonth
	}
	return 0
}

func (x *Categories_CategoryList_Categories) GetTopicsYear() int32 {
	if x != nil {
		return x.TopicsYear
	}
	return 0
}

func (x *Categories_CategoryList_Categories) GetTopicsAllTime() int32 {
	if x != nil {
		return x.TopicsAllTime
	}
	return 0
}

func (x *Categories_CategoryList_Categories) GetSubcategoryIds() []int32 {
	if x != nil {
		return x.SubcategoryIds
	}
	return nil
}

var File_categories_proto protoreflect.FileDescriptor

var file_categories_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0xfd, 0x0b, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x9c, 0x0b, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x56, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x1a, 0xd9, 0x09, 0x0a, 0x0a, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x78, 0x63, 0x65, 0x72, 0x70, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x72, 0x70, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68,
	0x61, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x75,
	0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x34, 0x0a, 0x16, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x70, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x47, 0x0a, 0x21, 0x6e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1c, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x61, 0x79, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x44, 0x61, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x57, 0x65, 0x65,
	0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x59, 0x65, 0x61, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x5f,
	0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x21, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x63, 0x68, 0x61, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x64,
	0x6d, 0x61, 0x6e, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_categories_proto_rawDescOnce sync.Once
	file_categories_proto_rawDescData = file_categories_proto_rawDesc
)

func file_categories_proto_rawDescGZIP() []byte {
	file_categories_proto_rawDescOnce.Do(func() {
		file_categories_proto_rawDescData = protoimpl.X.CompressGZIP(file_categories_proto_rawDescData)
	})
	return file_categories_proto_rawDescData
}

var file_categories_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_categories_proto_goTypes = []interface{}{
	(*Categories)(nil),                         // 0: discourse.protobuf.Categories
	(*Categories_CategoryList)(nil),            // 1: discourse.protobuf.Categories.CategoryList
	(*Categories_CategoryList_Categories)(nil), // 2: discourse.protobuf.Categories.CategoryList.Categories
}
var file_categories_proto_depIdxs = []int32{
	1, // 0: discourse.protobuf.Categories.category_list:type_name -> discourse.protobuf.Categories.CategoryList
	2, // 1: discourse.protobuf.Categories.CategoryList.categories:type_name -> discourse.protobuf.Categories.CategoryList.Categories
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_categories_proto_init() }
func file_categories_proto_init() {
	if File_categories_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_categories_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Categories); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_categories_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Categories_CategoryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_categories_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Categories_CategoryList_Categories); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_categories_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_categories_proto_goTypes,
		DependencyIndexes: file_categories_proto_depIdxs,
		MessageInfos:      file_categories_proto_msgTypes,
	}.Build()
	File_categories_proto = out.File
	file_categories_proto_rawDesc = nil
	file_categories_proto_goTypes = nil
	file_categories_proto_depIdxs = nil
}
